{% if item.value.nginx.limit_req|default('Yes')|bool %}
limit_req_zone $binary_remote_addr zone=dos_{{ item.key }}:{{ item.value.nginx.limit_req_size|default('2m') }} rate={{ item.value.nginx.limit_req_rate|default('3r/s') }};
{% endif %}

server {
	server_name {{ item.key }}{% if item.value.serveralias is defined %}{% for i in item.value.serveralias %} {{ i }}{% endfor %}{% endif %};
	listen 80;
	listen [::]:80;
	return 301 https://{{ item.key }}$request_uri;
	access_log off;
	error_log /var/log/nginx/{{ item.key }}/error.log;
}

server {
	listen 443 ssl spdy;
	listen [::]:443 ssl spdy;
	server_name {{ item.key }};
	root /var/www/{{ item.value.user }}/www/{{ item.key }};
	access_log /var/log/nginx/{{ item.key }}/access.log;
	error_log /var/log/nginx/{{ item.key }}/error.log;

	gzip on;
	gzip_types text/plain application/xml text/css text/js text/xml application/javascript;
{% if item.value.nginx.root_options is defined %}

{% for i in item.value.nginx.root_options %}
	{{ i }};
{% endfor %}
{% endif %}

	ssl_certificate /etc/ssl/private/{{ item.key }}_chain.crt;
	ssl_certificate_key /etc/ssl/private/{{ item.key }}.key;

	ssl_stapling on;
	ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
	ssl_ciphers kEECDH+AES128:kEECDH:kEDH:-3DES:kRSA+AES128:kEDH+3DES:DES-CBC3-SHA:!RC4:!aNULL:!eNULL:!MD5:!EXPORT:!LOW:!SEED:!CAMELLIA:!IDEA:!PSK:!SRP:!SSLv2;
	ssl_prefer_server_ciphers on;
	ssl_dhparam /etc/nginx/dhparam.pem;
	ssl_session_cache shared:SSL:10m;
	ssl_session_timeout 20m;

	location / {
{% if item.value.nginx.limit_req|default('Yes')|bool %}
		limit_req zone=dos_{{ item.key }} burst={{ item.value.nginx.limit_req_burst|default('10') }} nodelay;
{% endif %}
		proxy_set_header X-Real-IP  $remote_addr;
		proxy_set_header X-Forwarded-For $remote_addr;
		proxy_set_header Host $host;
		proxy_set_header SERVER_PROTOCOL $server_protocol;
		proxy_set_header X-Forwarded-Proto $scheme;
		proxy_set_header HTTPS "on";
		proxy_pass http://127.0.0.1:8080;
	}

	location = /favicon.ico {
		log_not_found off;
		access_log off;
	}

	location = /robots.txt {
		allow all;
		log_not_found off;
		access_log off;
	}

	location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
		expires max;
		log_not_found off;
	}
}
{% if item.value.serveralias is defined %}

server {
	server_name{% for i in item.value.serveralias %} {{ i }}{% endfor %};
	listen 443 ssl spdy;
	listen [::]:443 ssl spdy;
	return 301 https://{{ item.key }}$request_uri;
	access_log off;
	error_log /var/log/nginx/{{ item.key }}/error.log;
}
{% endif %}
